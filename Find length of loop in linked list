Given a linked list of size N. The task is to complete the function countNodesinLoop() that checks whether a given Linked List contains loop or not and if loop is present then return the count of nodes in loop or else return 0.
Input(to be used for Expected Output Only):
First line of input contains number of testcases T. For each testcase, first line of input contains length of linked list and next line contains data of the linked list, and the third line contains the position of the node from beginning (0 based indexing) to which the last node will be connected to form a loop.
Note: If the input of the third line is zero then there is no loop.

Output:
For each testcase, there will be a single line of output containing the length of loop in linked list, else print 0, if loop is not present in the linked list.

User Task:
The task is to complete the function countNodesinLoop() which contains the only argument as reference to head of linked list.

Constraints:
1 <= T <= 100
1 <= N <= 500

Example:
Input:
2
10
25 14 19 33 10 21 39 90 58 45
4
2
1 0
1
Output:
6
1

Explanation:
Testcase 1: The loop is 45->10. So length of loop is 10->21->39->90->58->45 = 6. The number 10 is connected to the last node to form the loop because according to the input the 4th node from the beginning(0 based index) will be connected to the last node for the loop.
Testcase2:  The length of loop is 1.
*************************************Code*****************
#include<bits/stdc++.h> 
using namespace std; 
  
/* Link list node */
struct Node  
{  
    int data;  
    struct Node* next;  
};  
  
// Returns count of nodes present in loop.  
int countNodes(struct Node *n)  
{  
    int res = 1;  
    struct Node *temp = n;  
    while (temp->next != n)  
    {  
        res++;  
        temp = temp->next;  
    }  
    return res;  
}  
  
/* This function detects and counts loop  
nodes in the list. If loop is not there  
in then returns 0 */
int countNodesinLoop(struct Node *list)  
{  
    struct Node *slow_p = list, *fast_p = list;  
  
    while (slow_p && fast_p &&  
                     fast_p->next)  
    {  
        slow_p = slow_p->next;  
        fast_p = fast_p->next->next;  
  
        /* If slow_p and fast_p meet at  
        some point then there is a loop */
        if (slow_p == fast_p)  
            return countNodes(slow_p);  
    }  
  
    /* Return 0 to indeciate that  
       their is no loop*/
    return 0;  
}  
  
struct Node *newNode(int key)  
{  
    struct Node *temp =  
   (struct Node*)malloc(sizeof(struct Node));  
    temp->data = key;  
    temp->next = NULL;  
    return temp;  
}  
  
// Driver Code 
int main()  
{  
    struct Node *head = newNode(1);  
    head->next = newNode(2);  
    head->next->next = newNode(3);  
    head->next->next->next = newNode(4);  
    head->next->next->next->next = newNode(5);  
  
    /* Create a loop for testing */
    head->next->next->next->next->next = head->next;  
  
    cout << countNodesinLoop(head) << endl;  
  
    return 0;  
}  
